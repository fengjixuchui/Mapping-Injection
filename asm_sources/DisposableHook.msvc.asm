; Listing generated by Microsoft (R) Optimizing Compiler Version 19.22.27905.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	NtCreateThreadExCode
EXTRN	__imp_WinExec:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___acrt_iob_func:PROC
COMM	NtCreateThreadEx:QWORD
_DATA	ENDS
_TEXT	SEGMENT
NtCreateThreadExCode DB 065H
	DB	067H
	DB	048H
	DB	0a1H
	DB	060H
	DB	00H
	DB	00H
	DB	00H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	00H
	DB	00H
	DB	074H
	DB	064H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	05aH
	DB	029H
	DB	00H
	DB	00H
	DB	074H
	DB	05fH
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	039H
	DB	038H
	DB	00H
	DB	00H
	DB	074H
	DB	05aH
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	0d7H
	DB	03aH
	DB	00H
	DB	00H
	DB	074H
	DB	055H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	0abH
	DB	03fH
	DB	00H
	DB	00H
	DB	074H
	DB	050H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	0eeH
	DB	042H
	DB	00H
	DB	00H
	DB	074H
	DB	04bH
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	063H
	DB	045H
	DB	00H
	DB	00H
	DB	074H
	DB	046H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	0baH
	DB	047H
	DB	00H
	DB	00H
	DB	074H
	DB	041H
	DB	081H
	DB	0b8H
	DB	020H
	DB	01H
	DB	00H
	DB	00H
	DB	0bbH
	DB	047H
	DB	00H
	DB	00H
	DB	074H
	DB	03cH
	DB	07fH
	DB	041H
	DB	0ebH
	DB	046H
	DB	0b8H
	DB	0b3H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	044H
	DB	0b8H
	DB	0b4H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	03dH
	DB	0b8H
	DB	0b6H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	036H
	DB	0b8H
	DB	0b9H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	02fH
	DB	0b8H
	DB	0baH
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	028H
	DB	0b8H
	DB	0bbH
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	021H
	DB	0b8H
	DB	0bcH
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	01aH
	DB	0b8H
	DB	0bdH
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	013H
	DB	0b8H
	DB	0bdH
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	0cH
	DB	0b8H
	DB	0c1H
	DB	00H
	DB	00H
	DB	00H
	DB	0ebH
	DB	05H
	DB	0b8H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	049H
	DB	089H
	DB	0caH
	DB	0fH
	DB	05H
	DB	0c3H
_TEXT	ENDS
PUBLIC	SampleFunction
PUBLIC	DisposableHook
PUBLIC	main
PUBLIC	printf
PUBLIC	_vfprintf_l
PUBLIC	__local_stdio_printf_options
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SampleFunction DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$SampleFunction
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DisposableHook DD imagerel $LN5
	DD	imagerel $LN5+197
	DD	imagerel $unwind$DisposableHook
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
$SG4294967285 DB 'thread end', 0aH, 00H
	ORG $+4
$SG4294967286 DB 'C:\Windows\System32\cmd.exe /c ping -n 3 127.0.0.1', 00H
	ORG $+5
$SG4294967287 DB 'thread start', 0aH, 00H
	ORG $+2
$SG4294967288 DB 'DisposableHook End!', 0aH, 00H
	ORG $+3
$SG4294967289 DB 'DisposableHook Start!', 0aH, 00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DisposableHook DD 031201H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SampleFunction DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 961  :     }

	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\splintercode\Desktop\Mapping-Injection\DisposableHook\DisposableHook.c
;	COMDAT main
_TEXT	SEGMENT
threadCreated$ = 32
main	PROC						; COMDAT

; 25   : {

$LN3:
	sub	rsp, 56					; 00000038H

; 26   : 	//NtSetInformationProcess = (pNtSetInformationProcess)GetProcAddress(GetModuleHandle(L"ntdll"), "NtSetInformationProcess");
; 27   : 	NtCreateThreadEx = (pNtCreateThreadEx)&NtCreateThreadExCode;

	lea	rax, OFFSET FLAT:NtCreateThreadExCode
	mov	QWORD PTR NtCreateThreadEx, rax

; 28   : 	char threadCreated = 0x00;

	mov	BYTE PTR threadCreated$[rsp], 0

; 29   : 	printf("DisposableHook Start!\n");

	lea	rcx, OFFSET FLAT:$SG4294967289
	call	printf

; 30   : 	DisposableHook((LPVOID)&SampleFunction, &threadCreated);

	lea	rdx, QWORD PTR threadCreated$[rsp]
	lea	rcx, OFFSET FLAT:SampleFunction
	call	DisposableHook

; 31   : 	printf("DisposableHook End!\n");

	lea	rcx, OFFSET FLAT:$SG4294967288
	call	printf

; 32   : 	Sleep(3000);

	mov	ecx, 3000				; 00000bb8H
	call	QWORD PTR __imp_Sleep

; 33   : 	return 0;

	xor	eax, eax

; 34   : }

	add	rsp, 56					; 00000038H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\splintercode\Desktop\Mapping-Injection\DisposableHook\DisposableHook.c
;	COMDAT DisposableHook
_TEXT	SEGMENT
status$ = 96
tHandle$ = 104
objAttr$ = 112
shellcodeAddr$ = 176
threadCreated$ = 184
DisposableHook PROC					; COMDAT

; 36   : void DisposableHook(LPVOID shellcodeAddr, char *threadCreated) {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H

; 37   : 	NTSTATUS status;
; 38   : 	HANDLE tHandle = NULL;

	mov	QWORD PTR tHandle$[rsp], 0

; 39   : 	OBJECT_ATTRIBUTES objAttr = { sizeof(objAttr) };

	mov	DWORD PTR objAttr$[rsp], 48		; 00000030H
	lea	rax, QWORD PTR objAttr$[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb

; 40   : 
; 41   : 	if (InterlockedExchange8((CHAR*)threadCreated, 1) == 1) //avoid recursion + check if another thread already run DisposableHook function

	mov	al, 1
	mov	rcx, QWORD PTR threadCreated$[rsp]
	xchg	BYTE PTR [rcx], al
	movsx	eax, al
	cmp	eax, 1
	jne	SHORT $LN2@Disposable

; 42   : 		return;

	jmp	SHORT $LN1@Disposable
$LN2@Disposable:

; 43   : 	status = NtCreateThreadEx(&tHandle, GENERIC_EXECUTE, &objAttr, (HANDLE)-1, (LPVOID)shellcodeAddr, NULL, FALSE, 0, 0, 0, NULL);

	mov	QWORD PTR [rsp+80], 0
	mov	DWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 0
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR shellcodeAddr$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, -1
	lea	r8, QWORD PTR objAttr$[rsp]
	mov	edx, 536870912				; 20000000H
	lea	rcx, QWORD PTR tHandle$[rsp]
	call	QWORD PTR NtCreateThreadEx
	mov	DWORD PTR status$[rsp], eax

; 44   : 	if (status != 0)

	cmp	DWORD PTR status$[rsp], 0
	je	SHORT $LN3@Disposable

; 45   : 		InterlockedExchange8((CHAR*)threadCreated, 0); //thread creation failed, reset flag

	xor	eax, eax
	mov	rcx, QWORD PTR threadCreated$[rsp]
	xchg	BYTE PTR [rcx], al
$LN3@Disposable:
$LN1@Disposable:

; 46   : }

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
DisposableHook ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\splintercode\Desktop\Mapping-Injection\DisposableHook\DisposableHook.c
;	COMDAT SampleFunction
_TEXT	SEGMENT
lpParam$ = 48
SampleFunction PROC					; COMDAT

; 49   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 50   : 	printf("thread start\n");

	lea	rcx, OFFSET FLAT:$SG4294967287
	call	printf

; 51   : 	WinExec("C:\\Windows\\System32\\cmd.exe /c ping -n 3 127.0.0.1", 1);

	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG4294967286
	call	QWORD PTR __imp_WinExec

; 52   : 	Sleep(3000);

	mov	ecx, 3000				; 00000bb8H
	call	QWORD PTR __imp_Sleep

; 53   : 	printf("thread end\n");

	lea	rcx, OFFSET FLAT:$SG4294967285
	call	printf

; 54   : 	return 0;

	xor	eax, eax

; 55   : }

	add	rsp, 40					; 00000028H
	ret	0
SampleFunction ENDP
_TEXT	ENDS
END
